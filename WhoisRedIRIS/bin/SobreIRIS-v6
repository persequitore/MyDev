#! /usr/bin/perl

# INFORMACIÓN DEL PROGRAMA
# ---------------------------
# 
#       WHOIS optimizado para RedIRIS
# 
#       Nombre:                 SobreIRIS-v6 (desarrollado en lenguaje PERL)
#       Version:                6.0
#       Fecha creación:         03 de enero de 2012
#       Fecha de modificación:  ---
# 
# 
# RESUMEN
# --------
# 
#       El programa whois se debe ejecutar en un servidor de la siguiente manera: -> perl SobreIRIS
#       En la máquina cliente, la invocación debe ser: whois -h [máquina_servidor] -p [puerto_escucha] [modo] [ip_v4|ip_v6|dominio|host]
#
#	donde, [modo] puede ser
#
#		i)  n  --> Extrae toda la informacion institucional dado una ip_v4 o ip_v6 o dominio o host
#		ii) rt --> Extrae la/s direccion/es de correo de lo/s contacto/s operativo/s del equipo de seguridad institucionales dado una ip_v4 o ip_v6 o dominio o host
#
#       La ejecución de este programa está dividida en X pasos claramente diferenciados:
#       
#       i)   Lectura de la entrada desde el cliente por la línea whois
#       ii)  Acceso a MySQL para obtener, entre otros parámetros el acrónimo de la institución y copacode (además del router, asn, nombre, ...)
#       iii) Con el copacode y el acrónimo realizamos tres búsquedas en LDAP (datos institucionales, contactos oficiales y contactos CERT). Los resultados se almacenan en un hash.
#       iv)  Volcamos los resultados obtenidos en MySQL y LDAP a un string. De esta forma podemos maquetar la visualización de los resultados de una forma bonita
#
# 	Observación: Para el modo de ejecución "rt" en el paso iii) del párrafo anterior sólo se ejecutará la búsqueda LDAP para los contactos CERT. No así las búsquedas institucionales 
#			ni contactos oficiales
#
# 
# CONSTANTS AND VARIABLES THAT CAN BE MODIFIED
# ----------------------------------------------
# 
#       IMPORTANTE: En este código NO se debe modificar ningún parámetro.
#
#       Para ello hay un archivo creado en exclusividad para la configuración del programa.
#       Éste se encuentra en la ruta /etc/sobreiris/config_modulo.pm
# 
#
# DEPENDENCIAS
# -------------
#
#	Ficheros:
#
#	i) config.pm  --> Crea y maneja el objeto con los valores de configuración leídos del fichero config_modulo.pm explicado en el apartado "Constants and variables that can be modified"
#	ii) module.pm --> Implementación de las funciones de operación de MySQL, LDAP y manejo de información
# 
#	Además, deberán estar instalas en el servidor las siguientes librerías:
#
#       Data::Dumper;
#       POE qw(Component::Server::TCP Filter::Reference Component::Client::Whois::Smart);
#       Data::Validate::IP;
#       Data::Validate::Domain;
#       Net::DNS;
#       NetAddr::IP;
#       Net::IP;
#       Math::BigInt;
#       CGI::Carp qw(fatalsToBrowser);
#       DBI;
#       Net::LDAP;
#       Net::Whois::Proxy;
#
# 
# COPYRIGHT
# -----------
#  
#       This software is Copyright (c):
#               - Carlos Fuentes Bermejo - carlos.fuentes@rediris.es
#               - David Rodriguez Galiano - david.rodriguez@soporte.rediris.es 
# 


package whois;

use strict;
use warnings;


# Directorio donde se encuentran los fichero config.pm y module.pm
use Net::Whois::RedIRIS;
use Net::Whois::RedIRIS::Config;

use Data::Dumper;

use POE qw(Component::Server::TCP Filter::Reference Component::Client::Whois::Smart);

# Version
my $_VERSION_ = 6.0;

# Lectura del fichero de configuración y guardando los datos en el objeto
my $configObj = Net::Whois::RedIRIS::Config->new();

# Abriendo socket
POE::Component::Server::TCP->new(
        Alias => "whois",
	Concurrency => -1,
        Port => $configObj->listenOnPort(),
        ClientConnected => \&clientConnected,
        ClientInput => \&got_request,
        ClientDisconnected => \&clientDisconnected,
);

$configObj->destroy();

$poe_kernel->run();

exit (0);


###########################################  FUNCIONES  #################################################

###########################################################################################
# Notificacion apertura de conexión de cliente
sub clientConnected {
	my $configObj = Net::Whois::RedIRIS::Config->new();
        $configObj->writeLog( "Conexión establecida desde $_[HEAP]{remote_ip}.");
	$configObj->destroy();

}


###########################################################################################
# Notificacion de cierre de conexión de cliente
sub clientDisconnected {
	my $configObj = Net::Whois::RedIRIS::Config->new();;
        $configObj->writeLog("El cliente con IP $_[HEAP]{remote_ip} se ha desconectado.");
	$configObj->destroy();

} 


###########################################################################################
# Gestiona la consulta
sub got_request {

        #my ($kernel, $heap, $session, @str) = @_[KERNEL, HEAP, SESSION, ARG0..$#_];
	my ($kernel, $heap, $session, @str) = @_[KERNEL, HEAP, SESSION, ARG0];

	$configObj->writeLog("Creando objeto de configuración...") if ($configObj->debug() and $configObj->verbose());
	my $configObj = Net::Whois::RedIRIS::Config->new();

	$configObj->writeLog("Generando la consulta al whois...") if ($configObj->debug() and $configObj->verbose());

	# Cogemos opcion y argumento
	my ($option, $input) = split(/\s+/, $str[0]);

	my $value="";


	# Cuando sólo se recibe un argumento, entonces es una IP
	# La petición es del tipo 'whois -h whois.rediris.es 130.206.13.20'
	if (defined $option and $option ne "n" and $option ne "rt" and !defined $input){
		$input = $option;
		$option = "n";
	}

	if (!defined $option or ($option ne 'n' and $option ne 'rt') or !defined $input){
		$configObj->writeLog("... con un solo argumento") if ($configObj->debug() and $configObj->verbose());
		showHelp(\$heap);
	}
	else{	
		if ($option eq 'n'){
			$configObj->writeLog("\t... en modo normal") if ($configObj->debug() and $configObj->verbose());
			#showVersion(\$heap);
			$value = Net::Whois::RedIRIS::singleMode($configObj, \$input);	
		}
		elsif ($option eq 'rt'){
			$configObj->writeLog("\t... en modo rt") if ($configObj->debug() and $configObj->verbose());
			$value = Net::Whois::RedIRIS::RT_CERTMode($configObj, \$input);
		}

                $_[HEAP]{client}->put($value);
	}
	$configObj->destroy();
	$kernel->yield("shutdown");

}


###########################################################################################
# Fuerza la salida de un cliente
sub forceShutdown{
	my $kernel = shift;
	
	$kernel->yield("shutdown");
        return;
}


###########################################################################################
# Muestra el mensaje de ayuda
sub showHelp{
	my $heap = shift;

	
	$$heap->{client}->put("\nUsage for jwhois [Linux]");
	$$heap->{client}->put("\twhois -h whois.rediris.es n IP/domain/hostname");
        $$heap->{client}->put("\twhois -h whois.rediris.es rt IP/domain/hostname\n");
        $$heap->{client}->put("Usage for whois [MAC]");
        $$heap->{client}->put("\twhois -h whois.rediris.es n IP/domain/hostname");
        $$heap->{client}->put("\twhois -h whois.rediris.es \"rt IP/domain/hostname\"\n");


}


###########################################################################################
# Muestra el mensaje de ayuda
sub showVersion{
        my $heap = shift;
	
	$$heap->{client}->put("\n");
        $$heap->{client}->put("Whois de RedIRIS v.$_VERSION_ // Conexión realizada desde $$heap->{remote_ip}");
        $$heap->{client}->put("-------------------------------------------------------------");
        $$heap->{client}->put("\n");
}


1;
